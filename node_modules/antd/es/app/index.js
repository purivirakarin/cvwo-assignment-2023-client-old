import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useContext } from 'react';
import classNames from 'classnames';
import { ConfigContext } from '../config-provider';
import useStyle from './style';
import useMessage from '../message/useMessage';
import useNotification from '../notification/useNotification';
import useModal from '../modal/useModal';
import AppContext from './context';
var useApp = function useApp() {
  return React.useContext(AppContext);
};
var App = function App(props) {
  var customizePrefixCls = props.prefixCls,
    children = props.children,
    className = props.className;
  var _useContext = useContext(ConfigContext),
    getPrefixCls = _useContext.getPrefixCls;
  var prefixCls = getPrefixCls('app', customizePrefixCls);
  var _useStyle = useStyle(prefixCls),
    _useStyle2 = _slicedToArray(_useStyle, 2),
    wrapSSR = _useStyle2[0],
    hashId = _useStyle2[1];
  var customClassName = classNames(hashId, prefixCls, className);
  var _useMessage = useMessage(),
    _useMessage2 = _slicedToArray(_useMessage, 2),
    messageApi = _useMessage2[0],
    messageContextHolder = _useMessage2[1];
  var _useNotification = useNotification(),
    _useNotification2 = _slicedToArray(_useNotification, 2),
    notificationApi = _useNotification2[0],
    notificationContextHolder = _useNotification2[1];
  var _useModal = useModal(),
    _useModal2 = _slicedToArray(_useModal, 2),
    ModalApi = _useModal2[0],
    ModalContextHolder = _useModal2[1];
  var memoizedContextValue = React.useMemo(function () {
    return {
      message: messageApi,
      notification: notificationApi,
      modal: ModalApi
    };
  }, [messageApi, notificationApi, ModalApi]);
  return wrapSSR( /*#__PURE__*/React.createElement(AppContext.Provider, {
    value: memoizedContextValue
  }, /*#__PURE__*/React.createElement("div", {
    className: customClassName
  }, ModalContextHolder, messageContextHolder, notificationContextHolder, children)));
};
if (process.env.NODE_ENV !== 'production') {
  App.displayName = 'App';
}
App.useApp = useApp;
export default App;