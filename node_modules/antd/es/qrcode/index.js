import _extends from "@babel/runtime/helpers/esm/extends";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useMemo, useContext } from 'react';
import { QRCodeCanvas } from 'qrcode.react';
import classNames from 'classnames';
import { ReloadOutlined } from '@ant-design/icons';
import { ConfigContext } from '../config-provider';
import LocaleReceiver from '../locale/LocaleReceiver';
import warning from '../_util/warning';
import useStyle from './style/index';
import Spin from '../spin';
import Button from '../button';
import theme from '../theme';
var useToken = theme.useToken;
var QRCode = function QRCode(props) {
  var value = props.value,
    _props$icon = props.icon,
    icon = _props$icon === void 0 ? '' : _props$icon,
    _props$size = props.size,
    size = _props$size === void 0 ? 160 : _props$size,
    _props$iconSize = props.iconSize,
    iconSize = _props$iconSize === void 0 ? 40 : _props$iconSize,
    _props$color = props.color,
    color = _props$color === void 0 ? '#000' : _props$color,
    _props$errorLevel = props.errorLevel,
    errorLevel = _props$errorLevel === void 0 ? 'M' : _props$errorLevel,
    _props$status = props.status,
    status = _props$status === void 0 ? 'active' : _props$status,
    _props$bordered = props.bordered,
    bordered = _props$bordered === void 0 ? true : _props$bordered,
    onRefresh = props.onRefresh,
    style = props.style,
    className = props.className,
    customizePrefixCls = props.prefixCls;
  var _useContext = useContext(ConfigContext),
    getPrefixCls = _useContext.getPrefixCls;
  var prefixCls = getPrefixCls('qrcode', customizePrefixCls);
  var _useStyle = useStyle(prefixCls),
    _useStyle2 = _slicedToArray(_useStyle, 2),
    wrapSSR = _useStyle2[0],
    hashId = _useStyle2[1];
  var _useToken = useToken(),
    token = _useToken.token;
  var qrCodeProps = useMemo(function () {
    var imageSettings = {
      src: icon,
      x: undefined,
      y: undefined,
      height: iconSize,
      width: iconSize,
      excavate: true
    };
    return {
      value: value,
      size: size - (token.paddingSM + token.lineWidth) * 2,
      level: errorLevel,
      bgColor: 'transparent',
      fgColor: color,
      imageSettings: icon ? imageSettings : undefined
    };
  }, [errorLevel, color, icon, iconSize, size, value]);
  if (!value) {
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== "production" ? warning(false, 'QRCode', 'need to receive `value` props') : void 0;
    }
    return null;
  }
  if (process.env.NODE_ENV !== 'production') {
    process.env.NODE_ENV !== "production" ? warning(!(icon && errorLevel === 'L'), 'QRCode', 'ErrorLevel `L` is not recommended to be used with `icon`, for scanning result would be affected by low level.') : void 0;
  }
  var cls = classNames(prefixCls, className, hashId, _defineProperty({}, prefixCls + "-borderless", !bordered));
  return wrapSSR( /*#__PURE__*/React.createElement(LocaleReceiver, {
    componentName: "QRCode"
  }, function (locale) {
    return /*#__PURE__*/React.createElement("div", {
      style: _extends(_extends({}, style), {
        width: size,
        height: size
      }),
      className: cls
    }, status !== 'active' && /*#__PURE__*/React.createElement("div", {
      className: prefixCls + "-mask"
    }, status === 'loading' && /*#__PURE__*/React.createElement(Spin, null), status === 'expired' && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("p", null, locale.expired), typeof onRefresh === 'function' && /*#__PURE__*/React.createElement(Button, {
      type: "link",
      icon: /*#__PURE__*/React.createElement(ReloadOutlined, null),
      onClick: onRefresh
    }, locale.refresh))), /*#__PURE__*/React.createElement(QRCodeCanvas, _extends({}, qrCodeProps)));
  }));
};
export default QRCode;