"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard")["default"];
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _classnames = _interopRequireDefault(require("classnames"));
var _rcMenu = require("rc-menu");
var _toArray = _interopRequireDefault(require("rc-util/lib/Children/toArray"));
var _omit = _interopRequireDefault(require("rc-util/lib/omit"));
var React = _interopRequireWildcard(require("react"));
var _Sider = require("../layout/Sider");
var _tooltip = _interopRequireDefault(require("../tooltip"));
var _reactNode = require("../_util/reactNode");
var _MenuContext = _interopRequireDefault(require("./MenuContext"));
var MenuItem = function MenuItem(props) {
  var className = props.className,
    children = props.children,
    icon = props.icon,
    title = props.title,
    danger = props.danger;
  var _React$useContext = React.useContext(_MenuContext["default"]),
    prefixCls = _React$useContext.prefixCls,
    firstLevel = _React$useContext.firstLevel,
    direction = _React$useContext.direction,
    disableMenuItemTitleTooltip = _React$useContext.disableMenuItemTitleTooltip,
    isInlineCollapsed = _React$useContext.inlineCollapsed;
  var renderItemChildren = function renderItemChildren(inlineCollapsed) {
    var wrapNode = /*#__PURE__*/React.createElement("span", {
      className: prefixCls + "-title-content"
    }, children);
    // inline-collapsed.md demo 依赖 span 来隐藏文字,有 icon 属性，则内部包裹一个 span
    // ref: https://github.com/ant-design/ant-design/pull/23456
    if (!icon || (0, _reactNode.isValidElement)(children) && children.type === 'span') {
      if (children && inlineCollapsed && firstLevel && typeof children === 'string') {
        return /*#__PURE__*/React.createElement("div", {
          className: prefixCls + "-inline-collapsed-noicon"
        }, children.charAt(0));
      }
    }
    return wrapNode;
  };
  var renderItem = function renderItem(_ref) {
    var _classNames;
    var siderCollapsed = _ref.siderCollapsed;
    var _a;
    var tooltipTitle = title;
    if (typeof title === 'undefined') {
      tooltipTitle = firstLevel ? children : '';
    } else if (title === false) {
      tooltipTitle = '';
    }
    var tooltipProps = {
      title: tooltipTitle
    };
    if (!siderCollapsed && !isInlineCollapsed) {
      tooltipProps.title = null;
      // Reset `open` to fix control mode tooltip display not correct
      // ref: https://github.com/ant-design/ant-design/issues/16742
      tooltipProps.open = false;
    }
    var childrenLength = (0, _toArray["default"])(children).length;
    var returnNode = /*#__PURE__*/React.createElement(_rcMenu.Item, (0, _extends2["default"])({}, (0, _omit["default"])(props, ['title', 'icon', 'danger']), {
      className: (0, _classnames["default"])((_classNames = {}, (0, _defineProperty2["default"])(_classNames, prefixCls + "-item-danger", danger), (0, _defineProperty2["default"])(_classNames, prefixCls + "-item-only-child", (icon ? childrenLength + 1 : childrenLength) === 1), _classNames), className),
      title: typeof title === 'string' ? title : undefined
    }), (0, _reactNode.cloneElement)(icon, {
      className: (0, _classnames["default"])((0, _reactNode.isValidElement)(icon) ? (_a = icon.props) === null || _a === void 0 ? void 0 : _a.className : '', prefixCls + "-item-icon")
    }), renderItemChildren(isInlineCollapsed));
    if (!disableMenuItemTitleTooltip) {
      returnNode = /*#__PURE__*/React.createElement(_tooltip["default"], (0, _extends2["default"])({}, tooltipProps, {
        placement: direction === 'rtl' ? 'left' : 'right',
        overlayClassName: prefixCls + "-inline-collapsed-tooltip"
      }), returnNode);
    }
    return returnNode;
  };
  return /*#__PURE__*/React.createElement(_Sider.SiderContext.Consumer, null, renderItem);
};
var _default = MenuItem;
exports["default"] = _default;